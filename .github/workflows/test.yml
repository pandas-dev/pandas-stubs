name: 'Test'

on:
  [push, pull_request, workflow_dispatch]
jobs:
  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10']

    steps:

    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      run: pip install poetry==1.1.7

    - name: Determine poetry version
      run: echo "::set-output name=VERSION::$(poetry --version)"
      id: poetry_version

    - name: Cache poetry.lock
      uses: actions/cache@v3
      with:
        path: poetry.lock
        key: ${{ matrix.os }}-${{ matrix.python-version }}-poetry-${{ steps.poetry_version.outputs.VERSION }}-${{ hashFiles('pyproject.toml') }}

    - name: Install project dependencies
      run: poetry install -vvv --no-root

    - name: Run mypy on 'tests' (using the local stubs) and on the local stubs
      run: poetry run poe mypy

    - name: Run pyright on 'tests' (using the local stubs) and on the local stubs
      run: poetry run poe pyright

    - name: Run pytest
      run: poetry run poe pytest

    - if: matrix.python-version == '3.8' && matrix.os == 'ubuntu-latest'
      uses: pre-commit/action@v3.0.0

    - name: Install pandas-stubs and run tests on the installed stubs
      run: poetry run poe test_dist
