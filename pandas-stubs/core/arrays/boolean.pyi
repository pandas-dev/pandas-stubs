import numpy as np
from pandas.core.arrays import ExtensionArray

from pandas._typing import (
    Scalar,
    type_t,
)

from pandas.core.dtypes.base import ExtensionDtype as ExtensionDtype

from .masked import BaseMaskedArray as BaseMaskedArray

class BooleanDtype(ExtensionDtype):
    @property
    def na_value(self) -> Scalar: ...
    @property
    def type(self) -> type_t: ...
    @property
    def kind(self) -> str: ...
    def __from_arrow__(self, array): ...

class BooleanArray(BaseMaskedArray):
    def __init__(
        self, values: np.ndarray, mask: np.ndarray, copy: bool = ...
    ) -> None: ...
    def __setitem__(self, key: int | np.ndarray | slice, value: object) -> None: ...
    @property
    def dtype(self): ...
    def astype(
        self, dtype: str | np.dtype, copy: bool = ...
    ) -> np.ndarray | ExtensionArray: ...
    def any(self, skipna: bool = ..., **kwargs) -> bool: ...
    def all(self, skipna: bool = ..., **kwargs) -> bool: ...
