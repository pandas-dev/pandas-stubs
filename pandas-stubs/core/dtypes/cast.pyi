import numpy as np

from pandas._typing import Dtype

def maybe_convert_platform(values): ...
def is_nested_object(obj) -> bool: ...
def maybe_downcast_to_dtype(result, dtype): ...
def maybe_downcast_numeric(result, dtype, do_round: bool = ...): ...
def maybe_promote(dtype, fill_value=...): ...
def infer_dtype_from(val, pandas_dtype: bool = ...): ...
def infer_dtype_from_scalar(val, pandas_dtype: bool = ...): ...
def infer_dtype_from_array(arr, pandas_dtype: bool = ...): ...
def maybe_infer_dtype_type(element): ...
def maybe_upcast(values, fill_value=..., dtype=..., copy: bool = ...): ...
def invalidate_string_dtypes(dtype_set) -> None: ...
def coerce_indexer_dtype(indexer, categories): ...
def astype_nansafe(arr, dtype, copy: bool = ..., skipna: bool = ...): ...
def soft_convert_objects(
    values: np.ndarray,
    datetime: bool = ...,
    numeric: bool = ...,
    timedelta: bool = ...,
    coerce: bool = ...,
    copy: bool = ...,
): ...
def convert_dtypes(
    input_array,
    convert_string: bool = ...,
    convert_integer: bool = ...,
    convert_boolean: bool = ...,
) -> Dtype: ...
def maybe_infer_to_datetimelike(value, convert_dates: bool = ...): ...
def maybe_cast_to_datetime(value, dtype, errors: str = ...): ...
def find_common_type(types): ...
def construct_1d_arraylike_from_scalar(value, length: int, dtype): ...
def construct_1d_object_array_from_listlike(values): ...
def maybe_cast_to_integer_array(arr, dtype, copy: bool = ...): ...
